/*********************
GENERAL MIXINS
*********************/

/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
@mixin headings($from: 1, $to: 6){
    %base-heading {
        @content
    }

    @if $from >= 1 and $to <= 6{
        @for $i from $from through $to{
            h#{$i}{
                @extend %base-heading;
            }
        }
    }
}

/**
 * Create a pixel value fallback for browsers that don't support rem.
 * Requires you to declare a property name and a size in rem.
 * Specifying "rem" after the unit is optional.
 *
   `@include px-fallback(font-size, 2rem);`
   `@include px-fallback(padding-left, 1.5);`
   `@include px-fallback(margin-bottom, $base-spacing-unit);`
 *
 */

@function calculatePx($the-size) {
	$pxSize: $the-size * $base-font-size;
	@return $pxSize;
}

@mixin rem-and-px($the-property, $the-size) {	
	$the-size: $the-size / ($the-size * 0 + 1); // Strip units
	#{$the-property}: calculatePx($the-size); // Calculate px as fallback
	#{$the-property}: $the-size * 1rem; // Return rem
}

/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

// alerts and notices
%alert {
	margin: 0;
	@include rem-and-px(margin-top, $half-spacing-unit);
	@include rem-and-px(margin-bottom, $half-spacing-unit);
	@include rem-and-px(padding, $half-spacing-unit);
	border: 1px solid;
	line-height: 1em;
}

.alert-help {
	@extend %alert;
	border-color: darken($alert-yellow, 5%);
	background: $alert-yellow;
}

.alert-info {
	@extend %alert;
	border-color: darken($alert-blue, 5%);
	background: $alert-blue;
}

.alert-error {
	@extend %alert;
	border-color: darken($alert-red, 5%);
	background: $alert-red;
}

.alert-success {
	@extend %alert;
	border-color: darken($alert-green, 5%);
	background: $alert-green;
}

/*********************
MEDIA QUERIES
*********************/
@mixin breakpoint($point) {
  @if $point == xlarge {
    @media (min-width: $bp-xlarge) { @content; }
  }
  @else if $point == large {
    @media (min-width: $bp-large) { @content; }
  }
  @else if $point == medium {
    @media (min-width: $bp-medium) { @content; }
  }
  @else if $point == small {
    @media (min-width: $bp-small)  { @content; }
  }
  @else if $point == mobile {
    @media (min-width: $bp-mobile)  { @content; }
  }
}


/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
	// defining prefixes so we can use them in mixins below
	$prefixes:      ("-webkit",  "");
  @each $prefix in $prefixes {
    #{$prefix}-transition: $transition;
  }

  transition: $transition;
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BUTTONS
*********************/

.button, .button:visited {
	font-family: $sans-serif;
	border: 1px solid darken($link-color, 13%);
	border-top-color: darken($link-color, 7%);
	border-left-color: darken($link-color, 7%);
	padding: 4px 12px;
	color: $white;
	display: inline-block;
	font-size: 11px;
	font-weight: bold;
	text-decoration: none;
	text-shadow: 0 1px rgba(0,0,0, .75);
	cursor: pointer;
	margin-bottom: 20px;
	line-height: 21px;
	border-radius: 4px;
	@include css-gradient($link-color, darken($link-color, 5%));


	&:hover, &:focus {
		color: $white;
	  	border: 1px solid darken($link-color, 13%);
	  	border-top-color: darken($link-color, 20%);
	 	border-left-color: darken($link-color, 20%);
		@include css-gradient(darken($link-color, 5%), darken($link-color, 10%));
	}

	&:active {
		@include css-gradient(darken($link-color, 5%), $link-color);
	}
}

.blue-button, .blue-button:visited {
	border-color: darken($alert-blue, 10%);
	text-shadow: 0 1px 1px darken($alert-blue, 10%);
	@include css-gradient( $alert-blue, darken($alert-blue, 5%) );
	box-shadow: inset 0 0 3px lighten($alert-blue, 16%);

	&:hover, &:focus {
		border-color: darken($alert-blue, 15%);
		@include css-gradient( darken($alert-blue, 4%), darken($alert-blue, 10%) );
	}
	&:active {
		@include css-gradient( darken($alert-blue, 5%), $alert-blue );
	}
}
